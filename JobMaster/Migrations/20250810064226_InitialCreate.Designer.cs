// <auto-generated />
using System;
using JobMaster.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobMaster.Migrations
{
    [DbContext(typeof(JobMasterDbContext))]
    [Migration("20250810064226_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubOrganisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Blog")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Company")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<int>("Following")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GitHubCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GitHubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GitHubUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("PublicGists")
                        .HasColumnType("int");

                    b.Property<int>("PublicRepos")
                        .HasColumnType("int");

                    b.Property<string>("TwitterUsername")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("GitHubId")
                        .IsUnique();

                    b.HasIndex("Login");

                    b.ToTable("github_organisations");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CloneUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultBranch")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Fork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ForksCount")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("GitHubCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GitHubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GitHubPushedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GitHubUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasDownloads")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasIssues")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasPages")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasProjects")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasWiki")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Homepage")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Language")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OpenIssuesCount")
                        .HasColumnType("int");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("SshUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StargazersCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    b.Property<int>("WatchersCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FullName");

                    b.HasIndex("GitHubId")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.ToTable("github_repositories");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BadgeUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GitHubCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GitHubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GitHubUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("GitHubId")
                        .IsUnique();

                    b.HasIndex("RepositoryId", "Name");

                    b.ToTable("github_workflows");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflowJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CheckRunId")
                        .HasColumnType("bigint");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GitHubCompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GitHubCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GitHubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GitHubStartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HeadSha")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RunnerGroupName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RunnerName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    b.Property<int>("WorkflowRunId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GitHubId")
                        .IsUnique();

                    b.HasIndex("WorkflowRunId", "Name");

                    b.ToTable("github_workflow_jobs");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflowRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtifactsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CancelUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CheckSuiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayTitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("GitHubCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GitHubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GitHubUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HeadBranch")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HeadSha")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HtmlUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("JobsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("LogsUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RerunUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("RunAttempt")
                        .HasColumnType("int");

                    b.Property<int>("RunNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RunStartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GitHubId")
                        .IsUnique();

                    b.HasIndex("WorkflowId", "RunNumber");

                    b.ToTable("github_workflow_runs");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubRepository", b =>
                {
                    b.HasOne("JobMaster.Models.GitHub.GitHubOrganisation", "Organisation")
                        .WithMany("Repositories")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflow", b =>
                {
                    b.HasOne("JobMaster.Models.GitHub.GitHubRepository", "Repository")
                        .WithMany("Workflows")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflowJob", b =>
                {
                    b.HasOne("JobMaster.Models.GitHub.GitHubWorkflowRun", "WorkflowRun")
                        .WithMany("WorkflowJobs")
                        .HasForeignKey("WorkflowRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowRun");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflowRun", b =>
                {
                    b.HasOne("JobMaster.Models.GitHub.GitHubWorkflow", "Workflow")
                        .WithMany("WorkflowRuns")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubOrganisation", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubRepository", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflow", b =>
                {
                    b.Navigation("WorkflowRuns");
                });

            modelBuilder.Entity("JobMaster.Models.GitHub.GitHubWorkflowRun", b =>
                {
                    b.Navigation("WorkflowJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
